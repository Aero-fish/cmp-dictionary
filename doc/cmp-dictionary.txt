*cmp-dictionary.txt*		 Dictionary completion source for nvim-cmp

==============================================================================
Contents					*cmp-dictionary-contents*

Introduction					|cmp-dictionary-introduction|
Commands					|cmp-dictionary-commands|
Setting						|cmp-dictionary-setting|
Option						|cmp-dictionary-option|
Find dictionaries				|cmp-dictionary-find-dictionaries|
Create dictionaries				|cmp-dictionary-create-dictionaries|
Lazy loading					|cmp-dictionary-lazy-loading|

==============================================================================
Introduction					*cmp-dictionary-introduction*

							*cmp-dictionary*
cmp-dictionary ~

Dictionary completion source for nvim-cmp.
<https://github.com/hrsh7th/nvim-cmp>


Requirements
- neovim >= 0.7
- nvim-cmp


==============================================================================
Commands					*cmp-dictionary-commands*

							*CmpDictionaryUpdate*
:CmpDictionaryUpdate

	Updates the dictionary. It is registered in BufEnter by default, and
	basically you will not need to hit this command explicitly. Use when
	lazy load and when spelllang is changed.


==============================================================================
Setting							*cmp-dictionary-setting*

Example setting

>
	require("cmp").setup({
		-- other settings
		sources = {
		-- other sources
			{
				name = "dictionary",
				keyword_length = 2,
			},
		}
	})
	
	require("cmp_dictionary").setup({
		dic = {
			["*"] = { "/usr/share/dict/words" },
			["lua"] = "path/to/lua.dic",
			["javascript,typescript"] = { "path/to/js.dic", "path/to/js2.dic" },
			filename = {
				["xmake.lua"] = { "path/to/xmake.dic", "path/to/lua.dic" },
			},
			filepath = {
				["%.tmux.*%.conf"] = "path/to/tmux.dic"
			},
			spelllang = {
				en = "path/to/english.dic",
			},
		},
		-- The following are default values.
		exact = 2,
		first_case_insensitive = false,
		document = false,
		document_command = "wn %s -over",
		async = false, 
		max_items = 1000,
		capacity = 5,
		debug = false,
	})
<


==============================================================================
Option							*cmp-dictionary-option*

						*cmp-dictionary-iskeyword*
iskeyword ~

	This plugin looks at |iskeyword| in vim. If you use a dictionary that
	contains special characters, please configure it appropriately. For
	example, if you want to complete the word `\word`, you would need to
	add `set iskeyword+=\` to your configuration file.


						*cmp-dictionary-spelllang*
spelllang ~

	This plugin looks at |spelllang| for detecting the language. Once the
	dictionary is set in |cmp-dictionary-dic-spelllang|, you can update
	|spelllang| and do |CmpDictionaryUpdate| to change the dictionary to
	be used.

>
	:setl spelllang=foo
	:CmpDictionaryUpdate
<


							*cmp-dictionary-dic*
dic ~
	table (default: {
		[*] = {},
		filename = nil,
		filepath = nil,
		spelllang = nil
	})

	All but four special keys are file types, and the values are the
	corresponding dictionary arrays. You can also use comma-separated file
	types for the key. If one dictionary, you can use a string instead of
	an array.

						*cmp-dictionary-dic-filename*
	The special key 'filename' takes a table as its value, which has keys
	of file names and values of corresponding dictionary array. The keys
	are used in exact match with the result of |expand|('%:t').

						*cmp-dictionary-dic-filepath*
	The special key 'filepath' is a table in a format similar to filename.
	The difference is that the keys are lua patterns and are used to match
	|expand|('%:p').

						*cmp-dictionary-dic-spelllang*
	The special key 'spelllang' is a table in a format similar to
	filename. The difference is that the keys are names of languages and
	are used to match |spelllang|.

						*cmp-dictionary-dic-asterisk*
	The special key '*' is a global setting. Dictionaries set to this key
	are always read.

	All dictionaries that meet the conditions will be loaded.


							*cmp-dictionary-exact*
exact ~
	integer (default: 2)

	It decides how many characters at the beginning are used as the exact
	match. If -1, only candidates with an exact prefix match will be
	returns.
	Candidate refinement by this source is only prefix match using this
	value (Fuzzy matching is left to the nvim-cmp body).


					*cmp-dictionary-first-case-insensitive*
first_case_insensitive ~
	boolean (default: false)

	If true, it will ignore the case of the first character. For example,
	if you have "Example" and "excuse" in your dictionary, typing "Ex"
	will bring up "Example" and "Excuse" as candidates, while typing "ex"
	will bring up "example" and "excuse".


							*cmp-dictionary-document*
document ~
	boolean (default: false)

	If true, activate document using external command. See
	|cmp-dictionary-document-command|


						*cmp-dictionary-document-command*
document_command ~
	string or list-like table (default: 'wn %s -over')

	This command is used above document feature. The '%s' will contain the
	candidate word. The default 'wn' command is wordnet.
	<https://wordnet.princeton.edu/>

	If a string, the arguments are recognized by separating it with a
	space character. If you don’t want that, use a table.

	If a table, the first element is the command and the second and
	subsequent are the arguments. For example, the default setting would
	be '{"wn", "%s", "-over"}'.


							*cmp-dictionary-async*
async ~
	boolean (default: false)

	If true, perform the initialization in a separate thread. If you are
	using a very large dictionary and the body operation is blocked, try
	this.

	Use |vim.mpack|. If an error occurs, the neovim version is out of date.


                                                      *cmp-dictionary-max-items*
max_items ~
	integer (default: -1)

	This is the maximum number of candidates that this source will return
	to the nvim-cmp body. -1 means no limit. Using a very large dictionary
	and returning tens of thousands of candidates, completion becomes very
	laggy. This is an option to avoid that.
	If you experience lag, setting this option and 'exact' appropriately
	may help.


							*cmp-dictionary-capacity*
capacity ~
	integer (default: 5)

	Determines the maximum number of dictionaries to be cached. This will
	prevent duplicate reads when you switch dictionaries with the settings
	described above.


							*cmp-dictionary-debug*
debug ~
	boolean (default: false)

	If true, debug messages are output.


==============================================================================
Find dictionaries			*cmp-dictionary-find-dictionaries*

You can download dic from aspell.net or installing by package manager, xbps
extract to
<https://ftp.gnu.org/gnu/aspell/dict/0index.html>

>
	$ ls /usr/share/dict/
	american-english	british-english	words
<

After installing aspell and dictionary you want, run following command to get
dic for this plugin (plain text).

>
	aspell -d <lang> dump master | aspell -l <lang> expand > my.dict
<


==============================================================================
Create dictionaries			*cmp-dictionary-create-dictionaries*

The dictionary is recognized as a list delimited by '%s'. '%s' is a space,
','',', or '. For example, if you use the following file as a dictionary, the
source to be added is'{"hello", "world", "!"}’.

>
	hello
	world !
<


==============================================================================
Lazy loading					*cmp-dictionary-lazy-loading*

By default, reading dictionaries are fired by `BufEnter`. So if this plugin
loading is set to `InsertEnter` or something, the dictionary will not load and
no candidates will appear. The workaround is to fire this update yourself when
the plugin is loaded (after setup).

For example, if you use packer.nvim, you can use

>
	use({
		"hrsh7th/nvim-cmp",
		event = "InsertEnter",
		-- other setting
	})
	use({
		"uga-rosa/cmp-dictionary",
		after = "nvim-cmp",
		config = function()
			require("cmp_dictionary").setup({
				dic = {
					["*"] = "/usr/share/dict/words",
				},
				first_case_insensitive = true,
				document = true,
			})
			require("cmp_dictionary").update() -- THIS
			-- OR
			-- vim.cmd("CmpDictionaryUpdate")
		end
	})
<


vim:tw=78:ts=8:noet:ft=help:norl:
